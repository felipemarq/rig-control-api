# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: felipebrody10
# "service" is the name of this project. This will also be added to your AWS resource names.
service: rig-control-api

provider:
  name: aws
  region: sa-east-1
  runtime: nodejs22.x
  memorySize: 128
  stage: ${opt:stage, 'dev'}
  environment: ${file(./sls/config/env.yml)}
  httpApi:
    #disableDefaultEndpoint: ${env:DISABLE_DEFAULT_APIGW_ENDPOINT, false}
    authorizers:
      CognitoAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: !GetAtt UserPool.ProviderURL
        audience:
          - !Ref UserPoolClient
    cors:
      allowedOrigins:
        - http://localhost:5173 # Vite
        - http://127.0.0.1:5173 # às vezes o Vite usa 127.0.0.1
        - https://app.moneystack.com.br # prod (se já existir)
      allowedHeaders:
        - Content-Type
        - Authorization
        - X-Requested-With
        - x-idempotency-key
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
      allowCredentials: false # true só se você usar cookies
      maxAge: 600

package:
  individually: true

custom:
  cognito:
    PoolName: ${self:service}-${self:provider.stage}-UserPool

build:
  esbuild:
    configFile: ./esbuild.config.mjs

functions:
  - ${file(./sls/functions/users.yml)}
  - ${file(./sls/functions/auth.yml)}
  - ${file(./sls/functions/dev.yml)}
  - ${file(./sls/functions/clients.yml)}
  - ${file(./sls/functions/contracts.yml)}
  - ${file(./sls/functions/rigs.yml)}
  - ${file(./sls/functions/userRigAccess.yml)}

resources:
  - ${file(./sls/resources/UserPool.yml)}
#  - ${file(./sls/resources/APIGWCustomDomain.yml)}
